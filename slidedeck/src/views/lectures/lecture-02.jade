doctype html
include ../includes/mixins

+page("Lecture 02 - Angular Bootcamp")
  +lecture-title-page("Angular Bootcamp", "Lecture 02")

  section
    h1 Lab One
    h2 Solution

  section
    h1 Module System

  section
    p Angular apps don't have a main method.
    p Modules declaratively specify how an application should be bootstrapped.

  section
    h3 Advantages
    ul
      li The declarative process is easier to understand.
      li You can package code as reusable modules.
      li The modules can be loaded in any order because modules delay execution.

  section
    p The code below creates a new module named 'app'
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', []);

      </code>

  section
    p Modules can list other modules as their dependencies.
    p Each module will only be loaded once, even if multiple other modules require it.

  section
    p Below is an example of how to specify a module dependency.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [
        'feature1'
      ]);

      angular.module('feature1', [
        'feature1.1'
      ]);

      angular.module('feature1.1', []);

      </code>

  section
    p Module instantiation has 2 phases: config and run.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function (someProvider) {
          // use provider to set up module
        })
        .run(function (aService) {
          // use service
        });

      </code>

  section
    h1 Dependency
    h1 Injection

  section
    p
       | The Angular injector subsystem is in charge of service instantiation, resolution of dependencies, and
       | provision of dependencies to components as requested.

  section
    p The example below shows how to specify that $scope and myService need to be injected into the function.
    br
    pre.
      <code class="js" data-trim>
        function AwesomeFn($scope, myService) {

        }

      </code>

  section
    p Angular also has an array syntax for specifying dependencies, similar to AMD.
    br
    pre.
      <code class="js" data-trim>
        [
          '$scope',
          'myService',
          function AwesomeFn($scope, myService) {

          }
        ]

      </code>

  section
    h1 HTML Compiler

  section
    p Angular's HTML compiler allows the developer to teach the browser new HTML syntax.

  section
    p
      | It allows you to attach behavior to any HTML element or attribute and even create new HTML
      | elements or attributes with custom behavior.

  section
    p Angular calls these behavior extensions
      strong  directives.

  section
    p So what does a directive look like?
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div ng-bind="exp"&gt;&lt;/div&gt;

        </code>

  section
    p The compiler($compile) is an Angular service that traverses the DOM looking for directives.

  section
    p The compilation process happens in two phases.

  section
    h3 Compile
    p Traverse the DOM and collect all of the directives.

  section
    h3 Link
    p Combine the directives with a scope and create a live view.
    ul
      li Any changes in the scope model are reflected in the view.
      li User interactions with the view are reflected in the scope model.

  section
    h2 Scope

  section
    p Scope is an object that refers to the application model.  
    p Execution context for expressions.
    p Arranged in hierarchical structure which mimic the DOM structure of the application.

  section
    img.no-style.slide-image(src="/tda-angular-slides/assets/img/nested-scope.png")

  section
    h3 Communicating with the outside world
    ul
      li $scope.$apply : Connect the outside into the Ng world.
      li $scope.$parse : Gets you two-way binding.
      li $scope.$watch : Helps you react to changes. 

  section
    p Let's see the HTML compiler in action

  section
    p ng-init evaluates a JavaScript expression on scope.
    p ng-bind takes a variable on scope and sets the content of the element to it.
    br
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 1 + 2;"&gt;
        &lt;p ng-bind="myVar"&gt;&lt;/p&gt;
      &lt;/div&gt;

      </code>

    p What will the DOM look like after compilation and linking?

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 1 + 2;"&gt;
        &lt;p ng-bind="myVar"&gt;3&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    p Instead of using ng-bind, we can use the shorthand {{ }}

  section
    p The linker will execute the expression inside {{ }} on scope and replace it with the result.

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 1 + 2;"&gt;
        &lt;p&gt;{{myVar}}{{myVar + 1}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

    p What will the DOM look like after compilation and linking?

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 1 + 2;"&gt;
        &lt;p&gt;34&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    h1 Controllers

  section
    p In Angular, a controller is a JavaScript constructor function that is used to augment the Angular Scope.

  section
    p You create controllers on a module.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('AppController',
          function() {

          }
        );

      </code>

  section
    p When creating a controller you can inject the new scope as well as other dependencies.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('AppController',
          function($scope, $interval) {

          }
        );

      </code>

  section
    p You can associate controllers with scope objects implicitly via the ngController directive.

  section
    p Controller
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('AppController',
          function($scope) {
            $scope.time = new Date();
          }
        );

      </code>

    p Template
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="AppController" &gt;
        &lt;p&gt;{{time}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section(id="example1", ng-controller="AppController")
    p Final result
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="AppController" &gt;
        &lt;p&gt;{{time}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    p Lets add some functionality to scope and show off data binding.

  section
    p The $interval service executes a function on scope in the supplied interval.
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('TimeController',
          function($scope, $interval) {
            // Set the value of $scope.time to 'now' every 10 ms
            $interval(function() {
              $scope.time = new Date();
            }, 10);
          }
        );

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="TimeController"&gt;
        &lt;p&gt;{{time}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section(id="example2", ng-controller="TimeController")
    h2(style="font-family: monospace;") {{time}}

  section
    img.no-style.slide-image(src='/tda-angular-slides/assets/img/suprised.gif')

  section
    h1 Bootstrapping

  section
    p
      | Angular initializes automatically upon DOMContentLoaded event or when the angular.js script is evaluated if at that
      | time document.readyState is set to 'complete'.

  section
    p At this point Angular looks for the ng-app directive which designates your application root.

  section
    p Typically the ng-app directive is used on the root html or body elements so that the entire document is traversed and linked by the compiler.
    br
    pre.
      <code class="html" data-trim>
      &lt;html ng-app="app"&gt;

      &lt;/html&gt;

      </code>

  section
    h1 Providers

  section
    p The AngularJS injector creates two types of objects:
    ul
      li Specialized Objects
      li Services

  section
    h3 Specialized Objects
    p Conform to a specific Angular framework API.
    p Controllers, directives, filters or animations.

  section
    h3 Services
    p Objects whose API is defined by the developer (you).
    p 5 Recipe Types

  section
    h2 Value Recipe

  section
    p Key,Value Pair
    p Often used for specifying configuration during runtime.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .value('apiUrl', '/api')
        .controller('MyCtrl', function(apiUrl) {
          // Do something with the apiUrl
        });

      </code>

  section
    h2 Constant Recipe

  section
    p Available during configuration phase.
    pre.
      <code class="js" data-trim>
      angular.module('app')
        .constant('apiUrl', '/api');
        
      </code>

  section
    h2 Providers
    p Core of the Angular services
    p Used by the injector 

  section
    p Let's look at an example:
    pre.
      <code class="js" data-trim>
      .provider('authorization', {

        $get: function ($injector, authentication, securityContext) {
          return {
            requireAuthenticatedUser: function () {
              // implementation for requiring an authenticated user.
            }
          };
        }
      });

      </code>

  section
    h2 Factory Recipe

  section
    p We can use the Factory recipe to provide utility functions that have other dependencies.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .factory('authentication', function(myDependency) {
          var authentication = {
            login : function(username, password) {
              // Perform login functionality with myDependency
            },
            logout : function(username, password) {
              // Perform logout functionality with myDependency
            },
          };
          return authentication;
        });

      </code>

  section
    h2 Service Recipe

  section
    p Using the service recipe, we just provide the constructor function.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .service('authentication', function(myDependency) {
          this.loginAttempts = 0;

          this.login = function(username, password) {
            this.loginAttempts++;
            // Perform login functionality with myDependency
          };

          this.logout = function(username, password) {
            this.loginAttempts = 0;
            // Perform logout functionality with myDependency
          };
        });

      </code>

  section
    h1 Lab Two
    h2 Angular Quickstart

  script.
    angular.module('lecture02', [])
      .controller('AppController', [
        '$scope',
        function($scope) {
          $scope.time = new Date();
        }
      ])
      .controller('TimeController', [
        '$scope',
        '$interval',
        function($scope, $interval) {
          $interval(function() {
            $scope.time = new Date();
          }, 10);
        }
      ]);

    angular.bootstrap(document.getElementById("example1"), ['lecture02']);
    angular.bootstrap(document.getElementById("example2"), ['lecture02']);
